#!/bin/bash
# ============================================================================
# COMANDOS DE DEPLOY - Sistema de Agendamento Cl√≠nica
# ============================================================================
# Dom√≠nio: clinica.123atendi.com.br
# Stack: Docker Swarm + Traefik + Node.js + React
# ============================================================================

# ----------------------------------------------------------------------------
# PASSO 1: GERAR JWT SECRET
# ----------------------------------------------------------------------------
echo "Gerando JWT Secret..."
JWT_SECRET=$(node -e "console.log(require('crypto').randomBytes(32).toString('hex'))")
echo "JWT_SECRET gerado: $JWT_SECRET"
echo ""
echo "‚ö†Ô∏è  IMPORTANTE: Copie este JWT_SECRET e guarde em local seguro!"
echo ""

# ----------------------------------------------------------------------------
# PASSO 2: CRIAR ARQUIVO .env.production
# ----------------------------------------------------------------------------
echo "Criando arquivo .env.production..."
cat > .env.production << EOF
# IMPORTANTE: Este arquivo cont√©m informa√ß√µes sens√≠veis
# Nunca commite este arquivo no Git

# =====================================
# VARI√ÅVEIS DO BACKEND
# =====================================
NODE_ENV=production
PORT=3001
JWT_SECRET=$JWT_SECRET
CORS_ORIGIN=https://clinica.123atendi.com.br

# =====================================
# VARI√ÅVEIS DO FRONTEND
# =====================================
REACT_APP_API_URL=https://clinica.123atendi.com.br/api
EOF

echo "‚úÖ Arquivo .env.production criado com sucesso!"
echo ""

# ----------------------------------------------------------------------------
# PASSO 3: BUILD DAS IMAGENS DOCKER
# ----------------------------------------------------------------------------
echo "Iniciando build das imagens Docker..."
echo ""

# Build Backend
echo "üê≥ Building backend..."
cd backend
docker build -t 123atendi/clinica-agendamento-backend:latest .
if [ $? -eq 0 ]; then
    echo "‚úÖ Backend build conclu√≠do!"
else
    echo "‚ùå Erro no build do backend"
    exit 1
fi
cd ..

# Build Frontend
echo ""
echo "üê≥ Building frontend..."
cd frontend
docker build -t 123atendi/clinica-agendamento-frontend:latest .
if [ $? -eq 0 ]; then
    echo "‚úÖ Frontend build conclu√≠do!"
else
    echo "‚ùå Erro no build do frontend"
    exit 1
fi
cd ..

echo ""
echo "‚úÖ Todas as imagens foram buildadas com sucesso!"
echo ""

# ----------------------------------------------------------------------------
# PASSO 4: (OPCIONAL) PUSH PARA DOCKER HUB
# ----------------------------------------------------------------------------
echo "Deseja fazer push das imagens para o Docker Hub? (s/n)"
read -r PUSH_DOCKERHUB

if [ "$PUSH_DOCKERHUB" = "s" ] || [ "$PUSH_DOCKERHUB" = "S" ]; then
    echo ""
    echo "Fazendo login no Docker Hub..."
    docker login

    echo ""
    echo "üì§ Pushing backend..."
    docker push 123atendi/clinica-agendamento-backend:latest

    echo ""
    echo "üì§ Pushing frontend..."
    docker push 123atendi/clinica-agendamento-frontend:latest

    echo ""
    echo "‚úÖ Push para Docker Hub conclu√≠do!"
fi

# ----------------------------------------------------------------------------
# PASSO 5: VERIFICAR PR√â-REQUISITOS
# ----------------------------------------------------------------------------
echo ""
echo "Verificando pr√©-requisitos..."
echo ""

# Verificar se est√° em um Swarm
if ! docker info | grep -q "Swarm: active"; then
    echo "‚ùå Docker Swarm n√£o est√° ativo!"
    echo "   Execute: docker swarm init"
    exit 1
else
    echo "‚úÖ Docker Swarm est√° ativo"
fi

# Verificar se rede externa existe
if ! docker network ls | grep -q "externa"; then
    echo "‚ö†Ô∏è  Rede 'externa' n√£o encontrada"
    echo "   Criando rede externa..."
    docker network create --driver overlay externa
    echo "‚úÖ Rede 'externa' criada"
else
    echo "‚úÖ Rede 'externa' existe"
fi

# Verificar se Traefik est√° rodando
if docker service ls | grep -q "traefik"; then
    echo "‚úÖ Traefik est√° rodando"
else
    echo "‚ö†Ô∏è  Traefik n√£o encontrado como servi√ßo"
    echo "   Certifique-se de que o Traefik est√° configurado corretamente"
fi

# Verificar DNS
echo ""
echo "Verificando DNS..."
if nslookup clinica.123atendi.com.br > /dev/null 2>&1; then
    echo "‚úÖ DNS configurado: clinica.123atendi.com.br"
else
    echo "‚ö†Ô∏è  DNS n√£o resolvido ou n√£o propagado ainda"
    echo "   Aguarde a propaga√ß√£o ou verifique a configura√ß√£o"
fi

# ----------------------------------------------------------------------------
# PASSO 6: DEPLOY NO DOCKER SWARM
# ----------------------------------------------------------------------------
echo ""
echo "============================================================================"
echo "PRONTO PARA DEPLOY!"
echo "============================================================================"
echo ""
echo "Deseja fazer o deploy agora? (s/n)"
read -r DO_DEPLOY

if [ "$DO_DEPLOY" = "s" ] || [ "$DO_DEPLOY" = "S" ]; then
    echo ""
    echo "üöÄ Iniciando deploy da stack 'clinica'..."
    echo ""

    # Exportar JWT_SECRET
    export JWT_SECRET="$JWT_SECRET"

    # Deploy
    docker stack deploy -c docker-compose.yml clinica

    if [ $? -eq 0 ]; then
        echo ""
        echo "‚úÖ Deploy conclu√≠do com sucesso!"
        echo ""
        echo "Verificando status dos servi√ßos..."
        sleep 3
        docker stack services clinica

        echo ""
        echo "============================================================================"
        echo "üéâ DEPLOY REALIZADO COM SUCESSO!"
        echo "============================================================================"
        echo ""
        echo "üìç URLs:"
        echo "   Frontend: https://clinica.123atendi.com.br"
        echo "   API:      https://clinica.123atendi.com.br/api"
        echo ""
        echo "üîë Credenciais padr√£o:"
        echo "   Usu√°rio: admin"
        echo "   Senha:   admin123"
        echo ""
        echo "üìä Comandos √∫teis:"
        echo "   Ver logs backend:  docker service logs clinica_backend -f"
        echo "   Ver logs frontend: docker service logs clinica_frontend -f"
        echo "   Ver status:        docker stack ps clinica"
        echo "   Popular banco:     docker exec \$(docker ps -q -f name=clinica_backend) npm run seed"
        echo ""
        echo "‚ö†Ô∏è  IMPORTANTE:"
        echo "   - Aguarde 1-2 minutos para emiss√£o do certificado SSL"
        echo "   - Altere a senha padr√£o ap√≥s primeiro login"
        echo "   - Configure backup autom√°tico do banco de dados"
        echo ""
        echo "============================================================================"
    else
        echo ""
        echo "‚ùå Erro no deploy"
        echo "Verifique os logs para mais detalhes"
        exit 1
    fi
else
    echo ""
    echo "Deploy cancelado pelo usu√°rio"
    echo ""
    echo "Para fazer deploy manualmente, execute:"
    echo "  export JWT_SECRET=\"$JWT_SECRET\""
    echo "  docker stack deploy -c docker-compose.yml clinica"
fi

# ----------------------------------------------------------------------------
# PASSO 7: POPULAR BANCO DE DADOS (OPCIONAL)
# ----------------------------------------------------------------------------
if [ "$DO_DEPLOY" = "s" ] || [ "$DO_DEPLOY" = "S" ]; then
    echo ""
    echo "Deseja popular o banco de dados com dados de exemplo? (s/n)"
    read -r SEED_DB

    if [ "$SEED_DB" = "s" ] || [ "$SEED_DB" = "S" ]; then
        echo ""
        echo "Aguardando container do backend ficar pronto..."
        sleep 5

        BACKEND_CONTAINER=$(docker ps -q -f name=clinica_backend)

        if [ -z "$BACKEND_CONTAINER" ]; then
            echo "‚ö†Ô∏è  Container do backend ainda n√£o est√° rodando"
            echo "   Execute manualmente depois:"
            echo "   docker exec \$(docker ps -q -f name=clinica_backend) npm run seed"
        else
            echo "Populando banco de dados..."
            docker exec "$BACKEND_CONTAINER" npm run seed

            if [ $? -eq 0 ]; then
                echo "‚úÖ Banco de dados populado com sucesso!"
                echo ""
                echo "Dados criados:"
                echo "  - 1 usu√°rio admin"
                echo "  - 5 m√©dicos"
                echo "  - 20 pacientes"
                echo "  - 15 consultas"
            else
                echo "‚ö†Ô∏è  Erro ao popular banco. Execute manualmente:"
                echo "   docker exec \$(docker ps -q -f name=clinica_backend) npm run seed"
            fi
        fi
    fi
fi

echo ""
echo "============================================================================"
echo "SCRIPT DE DEPLOY FINALIZADO"
echo "============================================================================"
echo ""
